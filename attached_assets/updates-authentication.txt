Our current authentication system (using Passport strategies and our earlier Auth.js attempts) has proven fragile and difficult to maintain, especially with LinkedIn’s recent API changes. We want to remove all existing authentication setup and replace it with a Clerk‑based implementation. Clerk is a hosted authentication solution that greatly simplifies OAuth integration (including social providers like LinkedIn), manages sessions out of the box, and lets us easily access key user details (such as email) for future RBAC (role-based access control) features.

Your tasks are as follows:

Remove Existing Authentication Code:

Delete all Passport‑based and Auth.js‑based authentication code from the repository.
Remove all related routes (e.g., /api/auth/linkedin, /api/login, /api/register, etc.) so that authentication is entirely handled by Clerk.
Install Clerk’s SDK Packages:

In the project’s root directory, install Clerk’s Node.js and Express packages:
bash
Copy
npm install @clerk/clerk-sdk-node @clerk/clerk-sdk-express
Make sure to update our environment variables (e.g., in .env.local) with the required Clerk keys:
env
Copy
CLERK_API_KEY=<your-clerk-api-key>
CLERK_FRONTEND_API=<your-clerk-frontend-api>
CLERK_JWT_KEY=<if applicable>
Implement Clerk in the Express App:

Create a new module (for example, clerkAuth.ts) that sets up Clerk’s Express middleware.
Use Clerk’s Express adapter (e.g. ClerkExpressWithAuth) to protect our routes. An example configuration might be:
ts
Copy
// clerkAuth.ts
import express from 'express';
import { ClerkExpressWithAuth } from '@clerk/clerk-sdk-express';

const router = express.Router();

// Initialize the Clerk middleware using our Clerk API key
const clerkMiddleware = ClerkExpressWithAuth({
  apiKey: process.env.CLERK_API_KEY,
  apiVersion: 2,  // Confirm with Clerk documentation for the proper version
});

// Mount the Clerk middleware on all authentication routes
router.use(clerkMiddleware);

// Example protected route: return authenticated user data
router.get('/api/user', (req, res) => {
  // Clerk injects a `req.auth` object containing user information
  if (!req.auth || !req.auth.userId) {
    return res.status(401).json({ error: "Not authenticated" });
  }
  res.json({
    id: req.auth.userId,
    email: req.auth.emailAddress,
    // Additional user fields can be added here
  });
});

export default router;
In your main server file (e.g. server/index.ts), mount this router:
ts
Copy
import clerkAuthRouter from './clerkAuth';
app.use('/api/auth', clerkAuthRouter);
Plan for Future RBAC and Subscription Management:

Ensure that the user data returned from Clerk (e.g. email and unique user ID) is stored in our PostgreSQL database. Update our shared user schema if needed so that extra attributes (like subscription tier, roles, etc.) can be added later.
The sign-in callback should be designed so that, in the future, we can map Clerk’s authenticated user to a database record where we can enforce RBAC rules (e.g., limiting research runs for free versus premium users).
Client-Side Integration:

Update the client’s authentication UI (e.g. in the Navbar or auth page) to use Clerk’s client-side SDK or hosted sign-in page. This might involve replacing the current “Sign in with LinkedIn” button with one that directs the user to Clerk’s sign-in flow.
Ensure that the user experience remains consistent and that after a successful sign-in, the client can fetch the authenticated user data from the /api/user endpoint.
