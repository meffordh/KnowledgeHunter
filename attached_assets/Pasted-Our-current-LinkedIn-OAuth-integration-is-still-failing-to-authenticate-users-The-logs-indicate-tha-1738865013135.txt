Our current LinkedIn OAuth integration is still failing to authenticate users. The logs indicate that GET /api/user returns 401 and that our callback isn’t retrieving the user profile correctly (e.g. “failed to fetch user profile”). To resolve this reliably, please refactor the LinkedIn authentication to use the passport-linkedin-oauth2 package.

Steps:

Install the Package:

Add the package to our project:
bash
Copy
npm install passport-linkedin-oauth2
Configure the Strategy:

In our authentication setup (in server/auth.ts), replace our current custom LinkedIn strategy with one using passport-linkedin-oauth2.
Use the following configuration:
js
Copy
const LinkedInStrategy = require('passport-linkedin-oauth2').Strategy;

passport.use(new LinkedInStrategy({
  clientID: process.env.LINKEDIN_CLIENT_ID,
  clientSecret: process.env.LINKEDIN_CLIENT_SECRET,
  callbackURL: 'https://deep-research-web-interface-meffordh.replit.app/api/auth/linkedin/callback',
  scope: ['openid', 'profile', 'email'],
  state: true,
  proxy: true,
  // Override the default profile URL to use the userinfo endpoint per OpenID Connect:
  profileURL: 'https://api.linkedin.com/v2/userinfo'
},
async (accessToken, refreshToken, profile, done) => {
  try {
    // If necessary, optionally perform a separate fetch to get the email:
    // For example:
    // const emailResponse = await fetch('https://api.linkedin.com/v2/emailAddress?q=members&projection=(elements*(handle~))', {
    //   headers: { 'Authorization': `Bearer ${accessToken}` }
    // });
    // const emailData = await emailResponse.json();
    // profile.emails = [{ value: /* extract email from emailData */ }];
    
    // Use the profile data to find or create the user:
    const user = await storage.getUserByEmail(profile.emails && profile.emails[0] ? profile.emails[0].value : '');
    if (!user) {
      // Create new user logic here...
    }
    return done(null, profile);
  } catch (error) {
    return done(error);
  }
}));
Ensure that your environment variables for the LinkedIn client ID and secret are set properly.
Testing and Error Handling:

Test the LinkedIn login flow by accessing /api/auth/linkedin and verifying that the callback returns a proper profile.
Make sure that error handling in the verify callback logs any issues so that if fetching the profile or email fails, you get a clear error message.
No Need for the Full Auth0 SDK:

Note that using passport-linkedin-oauth2 (maintained by Auth0) is sufficient for our needs. We do not need to integrate any additional Auth0 SDKs.
Implement these changes to replace our current custom LinkedIn OAuth logic. This should resolve the persistent profile fetching errors (such as “Not enough permissions to access: me.GET.NO_VERSION”) and allow our app to successfully authenticate users via LinkedIn.

Citations
GITHUB.COM
 – GitHub: auth0/passport-linkedin-oauth2