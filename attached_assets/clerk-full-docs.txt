[Skip to main content](https://clerk.com/docs/quickstarts/express?utm_source=DevRel&utm_medium=docs&utm_campaign=templates&utm_content=clerk-express-quickstart#main)

1. [Install `@clerk/express`](https://clerk.com/docs/quickstarts/express?utm_source=DevRel&utm_medium=docs&utm_campaign=templates&utm_content=clerk-express-quickstart#install-clerk-express)
2. [Set your Clerk API keys](https://clerk.com/docs/quickstarts/express?utm_source=DevRel&utm_medium=docs&utm_campaign=templates&utm_content=clerk-express-quickstart#set-your-clerk-api-keys)
3. [Add `clerkMiddleware()` to your app](https://clerk.com/docs/quickstarts/express?utm_source=DevRel&utm_medium=docs&utm_campaign=templates&utm_content=clerk-express-quickstart#add-clerk-middleware-to-your-app)
4. [Protect your routes using `requireAuth()`](https://clerk.com/docs/quickstarts/express?utm_source=DevRel&utm_medium=docs&utm_campaign=templates&utm_content=clerk-express-quickstart#protect-your-routes-using-require-auth)
5. [Add global TypeScript type (optional)](https://clerk.com/docs/quickstarts/express?utm_source=DevRel&utm_medium=docs&utm_campaign=templates&utm_content=clerk-express-quickstart#add-global-type-script-type-optional)
6. [Next steps](https://clerk.com/docs/quickstarts/express?utm_source=DevRel&utm_medium=docs&utm_campaign=templates&utm_content=clerk-express-quickstart#next-steps)

[Edit this page on GitHub](https://github.com/clerk/clerk-docs/edit/main/docs/quickstarts/express.mdx)

# Express Quickstart

## You will learn the following:

- Install `@clerk/express`
- Set your Clerk API keys
- Add `clerkMiddleware()` to your application
- Protect your routes using `requireAuth()`

## Before you start

- [Set up a Clerk application](https://clerk.com/docs/quickstarts/setup-clerk)
- [Create a Express application](https://expressjs.com/en/starter/installing.html)

## Example repository

- [Express Quickstart Repo](https://github.com/clerk/clerk-express-quickstart)

Learn how to integrate Clerk into your Express backend for secure user authentication and management. This guide focuses on backend implementation and requires a Clerk frontend SDK to function correctly.

## [Install `@clerk/express`](https://clerk.com/docs/quickstarts/express?utm_source=DevRel&utm_medium=docs&utm_campaign=templates&utm_content=clerk-express-quickstart\#install-clerk-express)

The [Clerk Express SDK](https://clerk.com/docs/references/express/overview) provides a range of backend utilities to simplify user authentication and management in your application.

Run the following command to install the SDK:

npm

yarn

pnpm

terminal

```isolate block w-fit min-w-full *:inline-block *:w-full *:before:pointer-events-none *:before:sticky *:before:left-0 *:before:z-20 *:before:inline-block *:before:select-none *:before:bg-gradient-to-r *:before:from-gray-800 *:after:pointer-events-none *:after:sticky *:after:right-0 *:after:z-10 *:after:inline-block *:after:w-4 *:after:select-none *:after:bg-gradient-to-l *:after:from-gray-800 *:after:from-35% *:after:content-["_"] [counter-reset:line] *:[counter-increment:line] *:before:w-4 *:before:from-35% *:before:content-["_"] sm:*:before:w-11 sm:*:before:from-80% sm:*:before:pr-4 sm:*:before:text-right sm:*:before:text-gray-400 sm:*:before:content-[counter(line)]
npm install @clerk/express
```

## [Set your Clerk API keys](https://clerk.com/docs/quickstarts/express?utm_source=DevRel&utm_medium=docs&utm_campaign=templates&utm_content=clerk-express-quickstart\#set-your-clerk-api-keys)

1. In the Clerk Dashboard, navigate to the [**API keys**⁠](https://dashboard.clerk.com/last-active?path=api-keys) page.
2. In the **Quick Copy** section, copy your Clerk Publishable and Secret Keys.
3. Paste your keys into your `.env` file.

The final result should resemble the following:

.env

```isolate block w-fit min-w-full *:inline-block *:w-full *:before:pointer-events-none *:before:sticky *:before:left-0 *:before:z-20 *:before:inline-block *:before:select-none *:before:bg-gradient-to-r *:before:from-gray-800 *:after:pointer-events-none *:after:sticky *:after:right-0 *:after:z-10 *:after:inline-block *:after:w-4 *:after:select-none *:after:bg-gradient-to-l *:after:from-gray-800 *:after:from-35% *:after:content-["_"] [counter-reset:line] *:[counter-increment:line] *:before:w-4 *:before:from-35% *:before:content-["_"] sm:*:before:w-11 sm:*:before:from-80% sm:*:before:pr-4 sm:*:before:text-right sm:*:before:text-gray-400 sm:*:before:content-[counter(line)]
CLERK_PUBLISHABLE_KEY=YOUR_PUBLISHABLE_KEY
CLERK_SECRET_KEY=YOUR_SECRET_KEY
```

This guide uses `dotenv` to load the environment variables. Run the following command to install it:

npm

yarn

pnpm

terminal

```isolate block w-fit min-w-full *:inline-block *:w-full *:before:pointer-events-none *:before:sticky *:before:left-0 *:before:z-20 *:before:inline-block *:before:select-none *:before:bg-gradient-to-r *:before:from-gray-800 *:after:pointer-events-none *:after:sticky *:after:right-0 *:after:z-10 *:after:inline-block *:after:w-4 *:after:select-none *:after:bg-gradient-to-l *:after:from-gray-800 *:after:from-35% *:after:content-["_"] [counter-reset:line] *:[counter-increment:line] *:before:w-4 *:before:from-35% *:before:content-["_"] sm:*:before:w-11 sm:*:before:from-80% sm:*:before:pr-4 sm:*:before:text-right sm:*:before:text-gray-400 sm:*:before:content-[counter(line)]
npm install dotenv
```

## [Add `clerkMiddleware()` to your app](https://clerk.com/docs/quickstarts/express?utm_source=DevRel&utm_medium=docs&utm_campaign=templates&utm_content=clerk-express-quickstart\#add-clerk-middleware-to-your-app)

The [`clerkMiddleware()`](https://clerk.com/docs/references/express/overview#clerk-middleware) function checks the request's cookies and headers for a session JWT and, if found, attaches the [`Auth`⁠](https://clerk.com/docs/references/backend/types/auth-object#auth-object) object to the `request` object under the `auth` key.

index.ts

```isolate block w-fit min-w-full *:inline-block *:w-full *:before:pointer-events-none *:before:sticky *:before:left-0 *:before:z-20 *:before:inline-block *:before:select-none *:before:bg-gradient-to-r *:before:from-gray-800 *:after:pointer-events-none *:after:sticky *:after:right-0 *:after:z-10 *:after:inline-block *:after:w-4 *:after:select-none *:after:bg-gradient-to-l *:after:from-gray-800 *:after:from-35% *:after:content-["_"] [counter-reset:line] *:[counter-increment:line] *:before:w-4 *:before:from-35% *:before:content-["_"] sm:*:before:w-11 sm:*:before:from-80% sm:*:before:pr-4 sm:*:before:text-right sm:*:before:text-gray-400 sm:*:before:content-[counter(line)]
import 'dotenv/config'
import express from 'express'
import { clerkMiddleware } from '@clerk/express'

const app = express()
const PORT = 3000

app.use(clerkMiddleware())

// Start the server and listen on the specified port
app.listen(PORT, () => {
  console.log(`Example app listening at http://localhost:${PORT}`)
})
```

## [Protect your routes using `requireAuth()`](https://clerk.com/docs/quickstarts/express?utm_source=DevRel&utm_medium=docs&utm_campaign=templates&utm_content=clerk-express-quickstart\#protect-your-routes-using-require-auth)

To protect your routes, use the [`requireAuth()`](https://clerk.com/docs/references/express/overview#require-auth) middleware. This middleware functions similarly to `clerkMiddleware()`, but also protects your routes by redirecting unauthenticated users to the sign-in page.

In the following example, `requireAuth()` is used to protect the `/protected` route. If the user isn't authenticated, they're redirected to the homepage. If the user is authenticated, the [`getAuth()`](https://clerk.com/docs/references/express/overview#get-auth) function is used to get the `userId`, which is passed to [`clerkClient.users.getUser()`⁠](https://clerk.com/docs/references/backend/user/get-user) to fetch the current user's `User` object.

index.ts

```isolate block w-fit min-w-full *:inline-block *:w-full *:before:pointer-events-none *:before:sticky *:before:left-0 *:before:z-20 *:before:inline-block *:before:select-none *:before:bg-gradient-to-r *:before:from-gray-800 *:after:pointer-events-none *:after:sticky *:after:right-0 *:after:z-10 *:after:inline-block *:after:w-4 *:after:select-none *:after:bg-gradient-to-l *:after:from-gray-800 *:after:from-35% *:after:content-["_"] [counter-reset:line] *:[counter-increment:line] *:before:w-4 *:before:from-35% *:before:content-["_"] sm:*:before:w-11 sm:*:before:from-80% sm:*:before:pr-4 sm:*:before:text-right sm:*:before:text-gray-400 sm:*:before:content-[counter(line)]
import 'dotenv/config'
import express from 'express'
import { clerkClient, requireAuth } from '@clerk/express'

const app = express()
const PORT = 3000

// Use requireAuth() to protect this route
// If user isn't authenticated, requireAuth() will redirect back to the homepage
app.get('/protected', requireAuth(), async (req, res) => {
  // Use `getAuth()` to get the user's `userId`
  const { userId } = getAuth(req)

  // Use Clerk's JavaScript Backend SDK to get the user's User object
  const user = await clerkClient.users.getUser(userId)

  return res.json({ user })
})

// Start the server and listen on the specified port
app.listen(PORT, () => {
  console.log(`Example app listening at http://localhost:${PORT}`)
})
```

## [Add global TypeScript type (optional)](https://clerk.com/docs/quickstarts/express?utm_source=DevRel&utm_medium=docs&utm_campaign=templates&utm_content=clerk-express-quickstart\#add-global-type-script-type-optional)

If you're using TypeScript, add a global type reference to your project to enable auto-completion and type checking for the `auth` object in Express request handlers.

1. In your application's root folder, create a `types/` directory.
2. Inside this directory, create a `globals.d.ts` file with the following code.

types/globals.d.ts

```isolate block w-fit min-w-full *:inline-block *:w-full *:before:pointer-events-none *:before:sticky *:before:left-0 *:before:z-20 *:before:inline-block *:before:select-none *:before:bg-gradient-to-r *:before:from-gray-800 *:after:pointer-events-none *:after:sticky *:after:right-0 *:after:z-10 *:after:inline-block *:after:w-4 *:after:select-none *:after:bg-gradient-to-l *:after:from-gray-800 *:after:from-35% *:after:content-["_"] [counter-reset:line] *:[counter-increment:line] *:before:w-4 *:before:from-35% *:before:content-["_"] sm:*:before:w-11 sm:*:before:from-80% sm:*:before:pr-4 sm:*:before:text-right sm:*:before:text-gray-400 sm:*:before:content-[counter(line)]
/// <reference types="@clerk/express/env" />
```

## [Next steps](https://clerk.com/docs/quickstarts/express?utm_source=DevRel&utm_medium=docs&utm_campaign=templates&utm_content=clerk-express-quickstart\#next-steps)

### [Usemiddlewaretoprotectroutes](https://clerk.com/docs/references/express/overview\#require-auth)

Learn how to protect specific routes from unauthenticated users.

### [Protectroutesbasedonauthorizationstatus](https://clerk.com/docs/references/express/overview\#get-auth)

Learn how to protect a route based on both authentication and authorization status.

### [ExpressSDKreference](https://clerk.com/docs/references/express/overview)

Learn more about additional Express SDK methods.

### [DeploytoProduction](https://clerk.com/docs/deployments/overview)

Learn how to deploy your Clerk app to production.

## Feedback

What did you think of this content?

It was helpfulIt was not helpfulI have feedback

[Edit this page on GitHub](https://github.com/clerk/clerk-docs/edit/main/docs/quickstarts/express.mdx)

Last updated onFeb 5, 2025

Support

[Skip to main content](https://clerk.com/docs/references/express/overview#main)

1. [`clerkMiddleware()`](https://clerk.com/docs/references/express/overview#clerk-middleware)
1. [`clerkMiddleware()` options](https://clerk.com/docs/references/express/overview#clerk-middleware-options)
2. [`requireAuth()`](https://clerk.com/docs/references/express/overview#require-auth)
3. [`getAuth()`](https://clerk.com/docs/references/express/overview#get-auth)
4. [`clerkClient`](https://clerk.com/docs/references/express/overview#clerk-client)
1. [Example: Use `clerkClient` to get a user's information](https://clerk.com/docs/references/express/overview#example-use-clerk-client-to-get-a-users-information)

[Edit this page on GitHub](https://github.com/clerk/clerk-docs/edit/main/docs/references/express/overview.mdx)

# Clerk Express SDK

The Clerk Express SDK provides a powerful set of tools and utilities to seamlessly integrate authentication, user management, and organization management into your Express application. Refer to the [quickstart](https://clerk.com/docs/quickstarts/express) to get started.

Important

If you are upgrading from the Node SDK, see the [upgrade guide](https://clerk.com/docs/upgrade-guides/node-to-express) for more information.

## [`clerkMiddleware()`](https://clerk.com/docs/references/express/overview\#clerk-middleware)

The `clerkMiddleware()` function checks the request's cookies and headers for a session JWT and if found, attaches the [`Auth`](https://clerk.com/docs/references/backend/types/auth-object#auth-object) object to the request object under the `auth` key.

```isolate block w-fit min-w-full *:inline-block *:w-full *:before:pointer-events-none *:before:sticky *:before:left-0 *:before:z-20 *:before:inline-block *:before:select-none *:before:bg-gradient-to-r *:before:from-gray-800 *:after:pointer-events-none *:after:sticky *:after:right-0 *:after:z-10 *:after:inline-block *:after:w-4 *:after:select-none *:after:bg-gradient-to-l *:after:from-gray-800 *:after:from-35% *:after:content-["_"] [counter-reset:line] *:[counter-increment:line] *:before:w-4 *:before:from-35% *:before:content-["_"] sm:*:before:w-11 sm:*:before:from-80% sm:*:before:pr-4 sm:*:before:text-right sm:*:before:text-gray-400 sm:*:before:content-[counter(line)] *:after:no-hover:ml-7
import { clerkMiddleware } from '@clerk/express'

const app = express()

// Pass no parameters
app.use(clerkMiddleware())

// Pass options
app.use(clerkMiddleware(options))
```

### [`clerkMiddleware()` options](https://clerk.com/docs/references/express/overview\#clerk-middleware-options)

The `clerkMiddleware()` function accepts an optional object. The following options are available:

- Name`audience?`Type`string | string[]`Description





A string or list of [audiences⁠](https://datatracker.ietf.org/doc/html/rfc7519#section-4.1.3). If passed, it is checked against the `aud` claim in the token.

- Name`authorizedParties?`Type`string[]`Description





An allowlist of origins to verify against, to protect your application from the subdomain cookie leaking attack.

For example: `['http://localhost:3000', 'https://example.com']`

- Name`clockSkewInMs?`Type`number`Description





Specifies the allowed time difference (in milliseconds) between the Clerk server (which generates the token) and the clock of the user's application server when validating a token. Defaults to 5000 ms (5 seconds).

- Name`domain?`Type`string`Description





The domain used for satellites to inform Clerk where this application is deployed.

- Name`isSatellite?`Type`boolean`Description





When using Clerk's satellite feature, this should be set to `true` for secondary domains.

- Name`jwtKey`Type`string`Description





Used to verify the session token in a networkless manner. Supply the PEM public key from the **[**API keys**⁠](https://dashboard.clerk.com/last-active?path=api-keys) page -> Show JWT public key -> PEM Public Key** section in the Clerk Dashboard. **It's recommended to use [the environment variable](https://clerk.com/docs/deployments/clerk-environment-variables) instead.** For more information, refer to [Manual JWT verification](https://clerk.com/docs/backend-requests/handling/manual-jwt).

- Name`organizationSyncOptions?`Type`OrganizationSyncOptions | undefined`Description





Used to activate a specific [organization](https://clerk.com/docs/organizations/overview) or [personal account](https://clerk.com/docs/organizations/organization-workspaces#organization-workspaces-in-the-clerk-dashboard:~:text=Personal%20account) based on URL path parameters. If there's a mismatch between the active organization in the session (e.g., as reported by [`auth()`](https://clerk.com/docs/references/nextjs/auth)) and the organization indicated by the URL, the middleware will attempt to activate the organization specified in the URL.

- Name`proxyUrl?`Type`string`Description





Specify the URL of the proxy, if using a proxy.

- Name`signInUrl`Type`string`Description





This URL will be used for any redirects that might happen and needs to point to your primary application on the client-side. This option is optional for production instances. **It is required to be set for a satellite application in a development instance.** It's recommended to use [the environment variable](https://clerk.com/docs/deployments/clerk-environment-variables#sign-in-and-sign-up-redirects) instead.

- Name`signUpUrl`Type`string`Description





This URL will be used for any redirects that might happen and needs to point to your primary application on the client-side. This option is optional for production instances but **must be set for a satellite application in a development instance.** It's recommended to use [the environment variable](https://clerk.com/docs/deployments/clerk-environment-variables#sign-in-and-sign-up-redirects) instead.

- Name`publishableKey`Type`string`Description





The Clerk Publishable Key for your instance. This can be found on the [**API keys**⁠](https://dashboard.clerk.com/last-active?path=api-keys) page in the Clerk Dashboard.

- Name`secretKey?`Type`string`Description





The Clerk Secret Key for your instance. This can be found on the [**API keys**⁠](https://dashboard.clerk.com/last-active?path=api-keys) page in the Clerk Dashboard. The `CLERK_ENCRYPTION_KEY` environment variable must be set when providing `secretKey` as an option, refer to [Dynamic keys](https://clerk.com/docs/references/express/overview#dynamic-keys).


- Name`clerkClient`Type[`ClerkClient`](https://clerk.com/docs/references/backend/overview#create-clerk-client-options)Description





An instance of the `ClerkClient` class. This is used to interact with the Clerk API.

- Name`debug`Type`boolean`Description





A flag to enable debug mode. When set to `true`, the middleware will log debug information to the console. Defaults to `false`.

- Name`enableHandshake`Type`boolean`Description





A flag to enable Clerk's handshake flow, which helps verify the session state when a session JWT has expired. It issues a `307` redirect to refresh the session JWT if the user is still logged in. Defaults to `true`.


## [`requireAuth()`](https://clerk.com/docs/references/express/overview\#require-auth)

The `requireAuth()` middleware functions similarly to `clerkMiddleware()`, but also protects your routes by redirecting unauthenticated users to the homepage. It accepts the same [options](https://clerk.com/docs/references/express/overview#options) as `clerkMiddleware()`.

You can also specify a custom sign-in URL to redirect unauthenticated users to by setting the `CLERK_SIGN_IN_URL` environment variable or by passing a `signInUrl` option to the middleware. It's recommended to set the environment variable.

```isolate block w-fit min-w-full *:inline-block *:w-full *:before:pointer-events-none *:before:sticky *:before:left-0 *:before:z-20 *:before:inline-block *:before:select-none *:before:bg-gradient-to-r *:before:from-gray-800 *:after:pointer-events-none *:after:sticky *:after:right-0 *:after:z-10 *:after:inline-block *:after:w-4 *:after:select-none *:after:bg-gradient-to-l *:after:from-gray-800 *:after:from-35% *:after:content-["_"] [counter-reset:line] *:[counter-increment:line] *:before:w-4 *:before:from-35% *:before:content-["_"] sm:*:before:w-11 sm:*:before:from-80% sm:*:before:pr-4 sm:*:before:text-right sm:*:before:text-gray-400 sm:*:before:content-[counter(line)] *:after:no-hover:ml-7
import { requireAuth } from '@clerk/express'
import express from 'express'

const app = express()
const PORT = 3000

// Apply middleware to all routes
app.use(requireAuth())

// Apply middleware to a specific route
// Redirects to the homepage if the user is not authenticated
app.get('/protected', requireAuth(), (req, res) => {
  res.send('This is a protected route.')
})

// Redirects to a custom URL if the user is not authenticated
// Requires `CLERK_SIGN_IN_URL` to be set in env vars
app.get('/protected', requireAuth({ signInUrl: process.env.CLERK_SIGN_IN_URL }), (req, res) => {
  res.send('This is a protected route.')
})

// Redirects to a custom URL if the user is not authenticated
// Uses the `signInUrl` option instead of the environment variable
app.get('/protected', requireAuth({ signInUrl: '/sign-in' }), (req, res) => {
  res.send('This is a protected route.')
})

// Start the server and listen on the specified port
app.listen(PORT, () => {
  console.log(`Server is running on http://localhost:${PORT}`)
})
```

## [`getAuth()`](https://clerk.com/docs/references/express/overview\#get-auth)

The `getAuth()` helper retrieves authentication state from the request object. See the [Next.js reference documentation⁠](https://clerk.com/docs/references/nextjs/get-auth) for more examples on how to use the returned `auth` object.

The following example uses `requireAuth()` to protect the route based on _authentication_ status, and then uses `getAuth()` to protect the route based on _authorization_ status.

```isolate block w-fit min-w-full *:inline-block *:w-full *:before:pointer-events-none *:before:sticky *:before:left-0 *:before:z-20 *:before:inline-block *:before:select-none *:before:bg-gradient-to-r *:before:from-gray-800 *:after:pointer-events-none *:after:sticky *:after:right-0 *:after:z-10 *:after:inline-block *:after:w-4 *:after:select-none *:after:bg-gradient-to-l *:after:from-gray-800 *:after:from-35% *:after:content-["_"] [counter-reset:line] *:[counter-increment:line] *:before:w-4 *:before:from-35% *:before:content-["_"] sm:*:before:w-11 sm:*:before:from-80% sm:*:before:pr-4 sm:*:before:text-right sm:*:before:text-gray-400 sm:*:before:content-[counter(line)] *:after:no-hover:ml-7
import { clerkMiddleware, getAuth, requireAuth } from '@clerk/express'
import express from 'express'

const app = express()
const PORT = 3000

// Apply `clerkMiddleware()` to all routes
app.use(clerkMiddleware())

// Use `getAuth()` to protect a route based on authorization status
const hasPermission = (req, res, next) => {
  const auth = getAuth(req)

  // Handle if the user is not authorized
  if (!auth.has({ permission: 'org:admin:example' })) {
    return res.status(403).send('Forbidden')
  }

  return next()
}

// Use `requireAuth()` to protect this route
// If user is not authenticated, requireAuth() will redirect back to the homepage
app.get('/path', requireAuth(), hasPermission, (req, res) => res.json(req.auth))

// Start the server and listen on the specified port
app.listen(PORT, () => {
  console.log(`Server is running on http://localhost:${PORT}`)
})
```

## [`clerkClient`](https://clerk.com/docs/references/express/overview\#clerk-client)

[Clerk's JavaScript Backend SDK](https://clerk.com/docs/references/backend/overview) provides access to Backend API resources and low-level authentication utilities for JavaScript environments. For example, to retrieve a list of all users in your application, you can use the `users.getUserList()` method from the JavaScript Backend SDK instead of manually making a fetch request to the `https://api.clerk.com/v1/users` endpoint.

All resource operations are mounted as sub-APIs on the `clerkClient` object. See the [reference documentation⁠](https://clerk.com/docs/references/backend/overview#usage) for more information.

### [Example: Use `clerkClient` to get a user's information](https://clerk.com/docs/references/express/overview\#example-use-clerk-client-to-get-a-users-information)

The following example uses `clerkClient` to get information about the currently signed-in user. If the user is authenticated, their `userId` is passed to [`clerkClient.users.getUser()`⁠](https://clerk.com/docs/references/backend/user/get-user) to get the current user's [`User`⁠](https://clerk.com/docs/references/javascript/user/user) object. If not authenticated, the request is rejected with a `401` status code.

```isolate block w-fit min-w-full *:inline-block *:w-full *:before:pointer-events-none *:before:sticky *:before:left-0 *:before:z-20 *:before:inline-block *:before:select-none *:before:bg-gradient-to-r *:before:from-gray-800 *:after:pointer-events-none *:after:sticky *:after:right-0 *:after:z-10 *:after:inline-block *:after:w-4 *:after:select-none *:after:bg-gradient-to-l *:after:from-gray-800 *:after:from-35% *:after:content-["_"] [counter-reset:line] *:[counter-increment:line] *:before:w-4 *:before:from-35% *:before:content-["_"] sm:*:before:w-11 sm:*:before:from-80% sm:*:before:pr-4 sm:*:before:text-right sm:*:before:text-gray-400 sm:*:before:content-[counter(line)] *:after:no-hover:ml-7
import { clerkClient, requireAuth } from '@clerk/express'
import express from 'express'

const app = express()
const PORT = 3000

app.get('/user', async (req, res) => {
  // Get the `userId` from the `Auth` object
  const userId = req.auth.userId

  // If user isn't authenticated, return a 401 error
  if (!userId) {
    res.status(401).json({ error: 'User not authenticated' })
  }

  // Use `clerkClient` to access Clerk's Backend SDK methods
  // and get the user's User object
  const user = await clerkClient.users.getUser(userId)

  res.json(user)
})

// Start the server and listen on the specified port
app.listen(PORT, () => {
  console.log(`Server is running on http://localhost:${PORT}`)
})
```

## Feedback

What did you think of this content?

It was helpfulIt was not helpfulI have feedback

[Edit this page on GitHub](https://github.com/clerk/clerk-docs/edit/main/docs/references/express/overview.mdx)

Last updated onJan 29, 2025

Support